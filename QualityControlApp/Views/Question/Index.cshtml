@model QuestionIndexFilterVM

@{
    ViewData["Title"] = Model.PageTitle ?? "Manage Questions";

    // Layout = "_Layout";

    var themeColor = "primary"; // اللون الأساسي
}

<link href="~/css/media.css" rel="stylesheet" />

<div class="container-fluid py-4">

    <!-- Page Header and Create Button -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-7">
            <h1 class="display-5 fw-bold text-@themeColor">@ViewData["Title"]</h1>
            <p class="text-muted lead">
                Browse, filter, and manage your questions efficiently.
            </p>
        </div>
        <div class="col-md-5 text-md-end">
            <a asp-action="Create" class="btn btn-lg btn-@themeColor shadow-sm rounded-pill px-4">
                <i class="fas fa-plus-circle me-2"></i>Add New Question
            </a>
        </div>
    </div>

    <!-- Filter Buttons by QuestionType -->
    @if (Model.AllQuestionTypes.Any())

    {
        <div class="mb-4 p-3 bg-light border rounded-3 shadow-sm">
            <h5 class="mb-3 text-@themeColor">
                <i class="fas fa-filter me-2"></i>Filter by Type
            </h5>
            <div class="btn-toolbar" role="toolbar" aria-label="Question type filter">
                <div class="btn-group btn-group-sm me-2 mb-2 mb-md-0" role="group" aria-label="All types">
                    <a asp-action="Index" asp-controller="Question"
                       class="btn @(Model.CurrentQuestionTypeIdFilter == null ? $"btn-{themeColor} active" : $"btn-outline-{themeColor}") rounded-pill px-3">
                        <i class="fas fa-list-ul me-1"></i> All Types
                    </a>
                </div>
                <div class="btn-group btn-group-sm flex-wrap" role="group" aria-label="Specific types">
                    @foreach (var type in Model.AllQuestionTypes)
                    {

                        var isActive = Model.CurrentQuestionTypeIdFilter == type.Id;
                        <a asp-action="Index" asp-controller="Question" asp-route-questionTypeId="@type.Id"
                           class="btn @(isActive ? $"btn-{themeColor} active" : $"btn-outline-{themeColor}") rounded-pill px-3 me-1 mb-1">
                            @type.TypeName
                        </a>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Questions Display Area as Cards -->
    @foreach (var group in Model.Questions.GroupBy(q => q.QuestionTypeId))

    {

        var groupTypeName = group.FirstOrDefault()?.QuestionType?.TypeName ?? "Unknown Type";

        <div class="mb-4">
            <h4 class="text-@themeColor border-bottom pb-2 mb-3">
                <i class="fas fa-layer-group me-2"></i>Type: @groupTypeName
            </h4>

            <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                @foreach (var item in group)

                {
                    <div class="col d-flex align-items-stretch">
                        <div class="card h-100 shadow-sm border-0 rounded-3 overflow-hidden card-hover-effect">
                            <div class="card-body d-flex flex-column pb-2">
                                <div class="mb-3">
                                    <span class="badge rounded-pill bg-@themeColor bg-opacity-25 text-dark px-2 py-1 mb-1">
                                        <small class="text-@themeColor fw-semibold me-1" style="opacity:0.8;">TYPE:</small> @(item.QuestionType?.TypeName ?? "N/A")
                                    </span>
                                    <span class="badge rounded-pill bg-secondary bg-opacity-25 text-dark px-2 py-1 mb-1">
                                        <small class="text-secondary-emphasis fw-semibold me-1" style="opacity:0.8;">MAX SCORE:</small> @item.MaxGrid
                                    </span>
                                </div>

                                <p class="card-text text-muted small flex-grow-1">
                                    @(item.Content.Length > 150 ? item.Content.Substring(0, 150) + "..." : item.Content)
                                    @if (item.Content.Length > 150)

                                    {
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="text-@themeColor small fw-semibold"> (View/Edit)</a>
                                    }
                                </p>

                                <div class="mt-auto border-top pt-2">
                                    <small class="text-muted d-block">
                                        <i class="far fa-calendar-plus me-1"></i> Added: @item.Created.ToString("dd MMM yyyy")
                                    </small>
                                    @if (item.Modified.HasValue)

                                    {
                                        <small class="text-muted d-block">
                                            <i class="far fa-calendar-check me-1"></i> Updated: @item.Modified.Value.ToString("dd MMM yyyy")
                                        </small>
                                    }
                                </div>
                            </div>
                            <div class="card-footer bg-white border-top-0 pt-0 pb-3 px-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-@themeColor rounded-pill px-3" title="Edit">
                                        <i class="fas fa-pencil-alt me-1"></i> Edit
                                    </a>
                                    <form asp-action="Delete" asp-route-id="@item.Id" method="post" class="d-inline"
                                          onsubmit="return confirm('Are you sure you want to delete this question: \'@item.Content.Replace("'", "\\'")\'? This action cannot be undone.');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-outline-danger rounded-pill px-3" title="Delete">
                                            <i class="fas fa-trash-alt me-1"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }




</div>

@section Styles {
    <style>
        body {
            background-color: #f8f9fa; /* Or #eef2f7 for a very light blueish gray */
        }

        .card-hover-effect {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }

            .card-hover-effect:hover {
                transform: translateY(-5px);
                box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.12) !important;
            }

        .display-5 {
            font-size: 2.5rem;
        }

        .lead {
            font-size: 1.1rem;
            font-weight: 300; /* Lighter lead text */
        }

        .rounded-pill {
            border-radius: 50rem !important;
        }

        /* Bootstrap 5.1+ provides these, but define if using older or for explicitness */
        .bg-opacity-25 {
            --bs-bg-opacity: .25;
        }

        .bg-opacity-75 {
            --bs-bg-opacity: .75;
        }

        .text-opacity-50 {
            --bs-text-opacity: .5;
        }


        /* Ensure small text within badges is distinct */
        .badge small.fw-semibold {
            /* opacity: 0.85; (تم استخدام style inline بدلا من ذلك) */
            font-size: 0.8em; /* Make the label part slightly smaller */
        }

        .card-footer.bg-white { /* Ensuring footer is white for button contrast */
            background-color: #fff !important;
        }
    </style>
}